{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\DaleRKittendorf\\\\Desktop\\\\DRKcodeDRK\\\\UTBootcamp\\\\PROJECTS\\\\google_books\\\\google_books\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"C:\\\\Users\\\\DaleRKittendorf\\\\Desktop\\\\DRKcodeDRK\\\\UTBootcamp\\\\PROJECTS\\\\google_books\\\\google_books\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\DaleRKittendorf\\\\Desktop\\\\DRKcodeDRK\\\\UTBootcamp\\\\PROJECTS\\\\google_books\\\\google_books\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\DaleRKittendorf\\\\Desktop\\\\DRKcodeDRK\\\\UTBootcamp\\\\PROJECTS\\\\google_books\\\\google_books\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\DaleRKittendorf\\\\Desktop\\\\DRKcodeDRK\\\\UTBootcamp\\\\PROJECTS\\\\google_books\\\\google_books\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\DaleRKittendorf\\\\Desktop\\\\DRKcodeDRK\\\\UTBootcamp\\\\PROJECTS\\\\google_books\\\\google_books\\\\client\\\\src\\\\pages\\\\Search.js\";\n//! Add code here to be search page for google books \n//* Search - User can search for books via the Google Books API and render them here. User has the option to \n//*\"View\" a book, bringing them to the book on Google Books, or \"Save\" a book, saving it to the Mongo database.\n//* The layout should include at least two React Components for each page Search and Saved.\n// When the form is submitted, use the API.saveBook method to save the book data\n// Then reload books from the database\n//   function handleFormSubmit(event) {\n//     event.preventDefault();\n//     if (formObject.title && formObject.author) {\n//       API.saveGbook({\n//         title: formGobject.title,\n//         author: formGobject.author,\n//         synopsis: formGobject.synopsis\n//       })\n//         .then(res => loadGbooks())\n//         .catch(err => console.log(err));\n//     }\n//   };\n//     return (\n//       <Container fluid>\n//         <Row>\n//           <Col size=\"md-6\">\n//             <Jumbotron>\n//               <h1>What Books Should I Read?</h1>\n//             </Jumbotron>\n//             <form>\n//               <Input\n//                 onChange={handleInputChange}\n//                 name=\"title\"\n//                 placeholder=\"Title (required)\"\n//               />\n//               <Input\n//                 onChange={handleInputChange}\n//                 name=\"author\"\n//                 placeholder=\"Author (required)\"\n//               />\n//               <TextArea\n//                 onChange={handleInputChange}\n//                 name=\"synopsis\"\n//                 placeholder=\"Synopsis (Optional)\"\n//               />\n//               <FormBtn\n//                 disabled={!(formGobject.author && formGobject.title)}\n//                 onClick={handleFormSubmit}\n//               >\n//                 Submit Book\n//               </FormBtn>\n//             </form>\n//           </Col>\n//           <Col size=\"md-6 sm-12\">\n//             <Jumbotron>\n//               <h1>Books On My List</h1>\n//             </Jumbotron>\n//             {gbooks.length ? (\n//               <List>\n//                 {gbooks.map(gbook => (\n//                   <ListItem key={gbook._id}>\n//                     <Link to={\"/gbooks/\" + gbook._id}>\n//                       <strong>\n//                         {gbook.title} by {gbook.author}\n//                       </strong>\n//                     </Link>\n//                     <DeleteBtn onClick={() => deleteGbook(gbook._id)} />\n//                   </ListItem>\n//                 ))}\n//               </List>\n//             ) : (\n//               <h3>No Results to Display</h3>\n//             )}\n//           </Col>\n//         </Row>\n//       </Container>\n//     );\n//   }\n// export default Gbooks;\n// import { searchGoogleBooks } from \"../utils/request\";\n// import React from 'react';\n// const Search = () => {\n//   const formstyle = {\n//         display: \"flex\",\n//         justifyContent: 'center',\n//         backgroundColor: 'orange',\n//         font: 'black', \n//         color: 'white',\n//         padding: '10px',\n//         fontsize: '1.25rem',\n//         textDecoration:\"none\",\n//   }\n//    return (\n//        <div style={ formstyle } className='search-form'>\n//            <form action=''>\n//                <input type='text'/>\n//                <button type=\"submit\">SEARCH GOOGLE BOOKS</button>\n//            </form>\n//        </div>\n//    )\n// }\n// export default Search;\nimport React, { Component } from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport { cleanMyBooks } from \"../utils/cleanByKey\";\nimport API from \"../utils/request\";\n\nvar Form = /*#__PURE__*/function (_Component) {\n  _inherits(Form, _Component);\n\n  var _super = _createSuper(Form);\n\n  function Form() {\n    var _this;\n\n    _classCallCheck(this, Form);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      userInput: '',\n      data: []\n    };\n\n    _this.handleInputChange = function (event) {\n      // Getting the value and name of the input which triggered the change\n      var value = event.target.value;\n      var userInput = event.target.value;\n      console.log(value); // Updating the input's state\n\n      _this.setState({\n        userInput: value\n      });\n    };\n\n    _this.handleFormSubmit = function (event) {\n      // Preventing the default behavior of the form submit (which is to refresh the page)\n      event.preventDefault(); // console.log (\"this runs on click\")\n\n      _this.setState({\n        userInput: \"\"\n      });\n\n      API.searchGoogleBooks(_this.state.userInput).then(function (data) {\n        var gbObject = data.data.items;\n        console.log(\"google books returns\", gbObject);\n\n        var _iterator = _createForOfIteratorHelper(gbObject),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var i = _step.value;\n            var _shortBook = {\n              title: i.volumeInfo.title\n            };\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        console.log(shortBook);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Form, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"form\", {\n        className: \"search-form\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        name: \"booktitle\",\n        onChange: this.handleInputChange,\n        type: \"text\",\n        placeholder: \"Enter Title of Book\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.handleFormSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }\n      }, \"SEARCH GOOGLE BOOKS\")), /*#__PURE__*/React.createElement(Jumbotron, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 15\n        }\n      }, \"Google Book Search Results\")), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 9\n        }\n      }, \" HELLO  \"), \"// map through data create cards\");\n    }\n  }]);\n\n  return Form;\n}(Component);\n\nexport default Form;","map":{"version":3,"sources":["C:/Users/DaleRKittendorf/Desktop/DRKcodeDRK/UTBootcamp/PROJECTS/google_books/google_books/client/src/pages/Search.js"],"names":["React","Component","Jumbotron","cleanMyBooks","API","Form","state","userInput","data","handleInputChange","event","value","target","console","log","setState","handleFormSubmit","preventDefault","searchGoogleBooks","then","gbObject","items","i","shortBook","title","volumeInfo"],"mappings":"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","sourcesContent":["//! Add code here to be search page for google books \r\n//* Search - User can search for books via the Google Books API and render them here. User has the option to \r\n//*\"View\" a book, bringing them to the book on Google Books, or \"Save\" a book, saving it to the Mongo database.\r\n//* The layout should include at least two React Components for each page Search and Saved.\r\n\r\n// When the form is submitted, use the API.saveBook method to save the book data\r\n  // Then reload books from the database\r\n\r\n//   function handleFormSubmit(event) {\r\n//     event.preventDefault();\r\n//     if (formObject.title && formObject.author) {\r\n//       API.saveGbook({\r\n//         title: formGobject.title,\r\n//         author: formGobject.author,\r\n//         synopsis: formGobject.synopsis\r\n//       })\r\n//         .then(res => loadGbooks())\r\n//         .catch(err => console.log(err));\r\n//     }\r\n//   };\r\n\r\n//     return (\r\n//       <Container fluid>\r\n//         <Row>\r\n//           <Col size=\"md-6\">\r\n//             <Jumbotron>\r\n//               <h1>What Books Should I Read?</h1>\r\n//             </Jumbotron>\r\n//             <form>\r\n//               <Input\r\n//                 onChange={handleInputChange}\r\n//                 name=\"title\"\r\n//                 placeholder=\"Title (required)\"\r\n//               />\r\n//               <Input\r\n//                 onChange={handleInputChange}\r\n//                 name=\"author\"\r\n//                 placeholder=\"Author (required)\"\r\n//               />\r\n//               <TextArea\r\n//                 onChange={handleInputChange}\r\n//                 name=\"synopsis\"\r\n//                 placeholder=\"Synopsis (Optional)\"\r\n//               />\r\n//               <FormBtn\r\n//                 disabled={!(formGobject.author && formGobject.title)}\r\n//                 onClick={handleFormSubmit}\r\n//               >\r\n//                 Submit Book\r\n//               </FormBtn>\r\n//             </form>\r\n//           </Col>\r\n//           <Col size=\"md-6 sm-12\">\r\n//             <Jumbotron>\r\n//               <h1>Books On My List</h1>\r\n//             </Jumbotron>\r\n//             {gbooks.length ? (\r\n//               <List>\r\n//                 {gbooks.map(gbook => (\r\n//                   <ListItem key={gbook._id}>\r\n//                     <Link to={\"/gbooks/\" + gbook._id}>\r\n//                       <strong>\r\n//                         {gbook.title} by {gbook.author}\r\n//                       </strong>\r\n//                     </Link>\r\n//                     <DeleteBtn onClick={() => deleteGbook(gbook._id)} />\r\n//                   </ListItem>\r\n//                 ))}\r\n//               </List>\r\n//             ) : (\r\n//               <h3>No Results to Display</h3>\r\n//             )}\r\n//           </Col>\r\n//         </Row>\r\n//       </Container>\r\n//     );\r\n//   }\r\n\r\n\r\n// export default Gbooks;\r\n\r\n// import { searchGoogleBooks } from \"../utils/request\";\r\n// import React from 'react';\r\n\r\n\r\n// const Search = () => {\r\n//   const formstyle = {\r\n//         display: \"flex\",\r\n//         justifyContent: 'center',\r\n//         backgroundColor: 'orange',\r\n//         font: 'black', \r\n//         color: 'white',\r\n//         padding: '10px',\r\n//         fontsize: '1.25rem',\r\n//         textDecoration:\"none\",\r\n//   }\r\n\r\n//    return (\r\n//        <div style={ formstyle } className='search-form'>\r\n//            <form action=''>\r\n//                <input type='text'/>\r\n//                <button type=\"submit\">SEARCH GOOGLE BOOKS</button>\r\n//            </form>\r\n//        </div>\r\n//    )\r\n\r\n// }\r\n// export default Search;\r\n\r\nimport React, { Component } from \"react\";\r\nimport Jumbotron from \"../components/Jumbotron\"\r\nimport { cleanMyBooks } from \"../utils/cleanByKey\";\r\nimport API from \"../utils/request\";\r\n\r\n\r\nclass Form extends Component {\r\n  // Setting the component's initial state\r\n  state = {\r\n    userInput: '',  \r\n    data: []\r\n  };\r\n\r\n  handleInputChange = event => {\r\n    // Getting the value and name of the input which triggered the change\r\n    let value = event.target.value;\r\n    const userInput= event.target.value;\r\n    console.log(value);\r\n    // Updating the input's state\r\n    this.setState({\r\n      userInput: value\r\n    });\r\n  };\r\n\r\n  handleFormSubmit = event => {\r\n    // Preventing the default behavior of the form submit (which is to refresh the page)\r\n    event.preventDefault();\r\n    // console.log (\"this runs on click\")\r\n    this.setState({\r\n      userInput: \"\"\r\n    });\r\n    API.searchGoogleBooks(this.state.userInput)\r\n     .then ( data => {\r\n       let gbObject = data.data.items\r\n       console.log(\"google books returns\", gbObject)\r\n       for (const i of gbObject) {\r\n           let shortBook = \r\n           {title : i.volumeInfo.title\r\n        \r\n        }\r\n       }\r\n       console.log(shortBook);\r\n     })};\r\n     \r\n    \r\n     \r\n\r\n  render() {\r\n        return (\r\n      <div>\r\n        <form className=\"search-form\">\r\n          <input\r\n            name=\"booktitle\"\r\n            onChange={this.handleInputChange}\r\n            type=\"text\"\r\n            placeholder=\"Enter Title of Book\"\r\n          /> \r\n          <button onClick={this.handleFormSubmit}>SEARCH GOOGLE BOOKS</button>\r\n        </form>\r\n        <Jumbotron>\r\n              <h1>Google Book Search Results</h1>\r\n        </Jumbotron>\r\n        <div> HELLO  </div>\r\n        // map through data create cards\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n"]},"metadata":{},"sourceType":"module"}