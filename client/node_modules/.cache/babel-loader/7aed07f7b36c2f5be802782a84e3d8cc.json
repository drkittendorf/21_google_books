{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\DaleRKittendorf\\\\Desktop\\\\DRKcodeDRK\\\\UTBootcamp\\\\PROJECTS\\\\google_books\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\Users\\\\DaleRKittendorf\\\\Desktop\\\\DRKcodeDRK\\\\UTBootcamp\\\\PROJECTS\\\\google_books\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\DaleRKittendorf\\\\Desktop\\\\DRKcodeDRK\\\\UTBootcamp\\\\PROJECTS\\\\google_books\\\\client\\\\src\\\\pages\\\\Addbooks.js\";\nimport React, { useState, useEffect } from \"react\"; // import DeleteBtn from \"../components/DeleteBtn\";\n\nimport API from \"../utils/API\"; // import { Link } from \"react-router-dom\";\n\nimport { Col, Row, Container } from \"../components/Grid\"; // import { List, ListItem } from \"../components/List\";\n\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\n\nfunction Books() {\n  // Setting our component's initial state\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      books = _useState2[0],\n      setBooks = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      formObject = _useState4[0],\n      setFormObject = _useState4[1]; // Load all books and store them with setBooks\n\n\n  useEffect(function () {\n    loadBooks();\n  }, []);\n  var initialState = {\n    title: \"\",\n    author: \"\",\n    synopsis: \"\"\n  };\n\n  var clearState = function clearState() {\n    setFormObject(_objectSpread({}, initialState));\n  }; // Loads all books and sets them to books\n\n\n  function loadBooks() {\n    API.getBooks().then(function (res) {\n      return setBooks(res.data);\n    }).then(clearState).catch(function (err) {\n      return console.log(err);\n    });\n  }\n\n  ; // When the form is submitted, use the API.saveBook method to save the book data\n  // Then reload books from the database\n\n  function handleFormSubmit(event) {\n    event.preventDefault();\n\n    if (formObject.title && formObject.author) {\n      API.saveBook({\n        title: formObject.title,\n        author: formObject.author,\n        synopsis: formObject.synopsis\n      }).then(console.log(\"book has been submitted to list\")).then(function (res) {\n        return loadBooks();\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    }\n  }\n\n  ; // Handles updating component state when the user types into the input field\n\n  function handleInputChange(event) {\n    var _event$target = event.target,\n        name = _event$target.name,\n        value = _event$target.value;\n    setFormObject(_objectSpread(_objectSpread({}, formObject), {}, {\n      [name]: value\n    })); // console.log(formObject)\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    size: \"md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 15\n    }\n  }, \"What book title would you like to add to your list?\"), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    onChange: handleInputChange,\n    name: \"title\",\n    placeholder: \"Title (required)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    onChange: handleInputChange,\n    name: \"author\",\n    placeholder: \"Author (required)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(TextArea, {\n    onChange: handleInputChange,\n    name: \"synopsis\",\n    placeholder: \"Synopsis (Optional)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(FormBtn, {\n    disabled: !(formObject.author && formObject.title),\n    onClick: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 15\n    }\n  }, \" Submit Book\")))));\n}\n\nexport default Books;","map":{"version":3,"sources":["C:/Users/DaleRKittendorf/Desktop/DRKcodeDRK/UTBootcamp/PROJECTS/google_books/client/src/pages/Addbooks.js"],"names":["React","useState","useEffect","API","Col","Row","Container","Input","TextArea","FormBtn","Books","books","setBooks","formObject","setFormObject","loadBooks","initialState","title","author","synopsis","clearState","getBooks","then","res","data","catch","err","console","log","handleFormSubmit","event","preventDefault","saveBook","handleInputChange","target","name","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n// import DeleteBtn from \"../components/DeleteBtn\";\r\nimport API from \"../utils/API\";\r\n// import { Link } from \"react-router-dom\";\r\nimport { Col, Row, Container } from \"../components/Grid\";\r\n// import { List, ListItem } from \"../components/List\";\r\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\r\n\r\nfunction Books() {\r\n  // Setting our component's initial state\r\n  const [books, setBooks] = useState([])\r\n  const [formObject, setFormObject] = useState({})\r\n  \r\n  // Load all books and store them with setBooks\r\n  useEffect(() => {\r\n    loadBooks()\r\n  }, [])\r\n\r\n  const initialState = {\r\n    title: \"\",\r\n    author: \"\",\r\n    synopsis: \"\"\r\n  };\r\n \r\n  const clearState = () => {\r\n    setFormObject({ ...initialState });\r\n  };\r\n\r\n  // Loads all books and sets them to books\r\n  function loadBooks() {\r\n    API.getBooks()\r\n      .then(res => setBooks(res.data))\r\n      .then(clearState)\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n  // When the form is submitted, use the API.saveBook method to save the book data\r\n  // Then reload books from the database\r\n  function handleFormSubmit(event) {\r\n    event.preventDefault();\r\n    if (formObject.title && formObject.author) {\r\n      API.saveBook({\r\n        title: formObject.title,\r\n        author: formObject.author,\r\n        synopsis: formObject.synopsis\r\n      })\r\n        .then(console.log(\"book has been submitted to list\") ) \r\n        .then(res => loadBooks())\r\n        .catch(err => console.log(err));\r\n    }\r\n  };\r\n   \r\n   // Handles updating component state when the user types into the input field\r\n   function handleInputChange(event) {\r\n    const { name, value } = event.target;\r\n    setFormObject({...formObject, [name]: value})\r\n    // console.log(formObject)\r\n  };\r\n\r\n\r\n    return (\r\n      <Container fluid>\r\n        <Row>\r\n          <Col size=\"md-6\">\r\n            \r\n              <h1>What book title would you like to add to your list?</h1>\r\n            \r\n            <form>\r\n              <Input\r\n                onChange={handleInputChange}\r\n                name=\"title\"\r\n                placeholder=\"Title (required)\"\r\n              />\r\n              <Input\r\n                onChange={handleInputChange}\r\n                name=\"author\"\r\n                placeholder=\"Author (required)\"\r\n              />\r\n              <TextArea\r\n                onChange={handleInputChange}\r\n                name=\"synopsis\"\r\n                placeholder=\"Synopsis (Optional)\"\r\n              />\r\n              <FormBtn\r\n                disabled={!(formObject.author && formObject.title)}\r\n                onClick={handleFormSubmit}> Submit Book\r\n              </FormBtn>\r\n            </form>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n\r\nexport default Books;\r\n"]},"metadata":{},"sourceType":"module"}