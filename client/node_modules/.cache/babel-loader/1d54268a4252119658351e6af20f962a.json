{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\DaleRKittendorf\\\\Desktop\\\\DRKcodeDRK\\\\UTBootcamp\\\\PROJECTS\\\\google_books\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\Users\\\\DaleRKittendorf\\\\Desktop\\\\DRKcodeDRK\\\\UTBootcamp\\\\PROJECTS\\\\google_books\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\DaleRKittendorf\\\\Desktop\\\\DRKcodeDRK\\\\UTBootcamp\\\\PROJECTS\\\\google_books\\\\client\\\\src\\\\pages\\\\Addbooks.js\";\nimport React, { useState } from \"react\";\nimport API from \"../utils/API\";\nimport { Container } from \"../components/Grid\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\n\nfunction Books() {\n  // Setting our component's initial values\n  var initialFormObjectState = {\n    title: \"\",\n    author: \"\",\n    synopsis: \"\"\n  }; // Setting up the state\n\n  var _useState = useState(_objectSpread({}, initialFormObjectState)),\n      _useState2 = _slicedToArray(_useState, 2),\n      formObject = _useState2[0],\n      setFormObject = _useState2[1];\n\n  var clearState = function clearState() {\n    console.log(formObject);\n    setFormObject(initialFormObjectState);\n    console.log(\"reset triggered\");\n    console.log(formObject);\n  }; // Loads all books and sets them to books\n\n\n  function loadBooks() {\n    API.getBooks() //   .then(res => setBooks(res.data))\n    .then(clearState).catch(function (err) {\n      return console.log(err);\n    });\n  }\n\n  ; // When the form is submitted, use the API.saveBook method to save the book data\n  // Then reload books from the database\n\n  function handleFormSubmit(e) {\n    e.preventDefault();\n\n    if (formObject.title && formObject.author) {\n      API.saveBook({\n        title: formObject.title,\n        author: formObject.author,\n        synopsis: formObject.synopsis\n      }).then(console.log(\"book has been submitted to list\")).then(function (res) {\n        return loadBooks();\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    }\n  }\n\n  ; // Handles updating component state when the user types into the input field\n\n  function handleInputChange(event) {\n    var _event$target = event.target,\n        name = _event$target.name,\n        value = _event$target.value;\n    setFormObject(_objectSpread(_objectSpread({}, formObject), {}, {\n      [name]: value\n    })); // console.log(formObject)\n  }\n\n  ;\n  return (\n    /*#__PURE__*/\n    //   <Container fluid>\n    React.createElement(\"row\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"col\", {\n      size: \"sm-6\",\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 15\n      }\n    }, \"What book title would you like to add to your list?\"), /*#__PURE__*/React.createElement(\"form\", {\n      className: \"card-container3\",\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      onChange: handleInputChange,\n      name: \"title\",\n      placeholder: \"title (required)\",\n      value: formObject.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Input, {\n      onChange: handleInputChange,\n      name: \"author\",\n      placeholder: \"author (required)\",\n      value: formObject.author,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(TextArea // className='synopsis'\n    , {\n      onChange: handleInputChange,\n      name: \"synopsis\",\n      placeholder: \"synopsis(Optional)\",\n      value: formObject.synopsis,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(FormBtn, {\n      disabled: !(formObject.author && formObject.title),\n      onClick: handleFormSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 16\n      }\n    }, \" Submit Book\")))) //   </Container>\n\n  );\n}\n\nexport default Books;","map":{"version":3,"sources":["C:/Users/DaleRKittendorf/Desktop/DRKcodeDRK/UTBootcamp/PROJECTS/google_books/client/src/pages/Addbooks.js"],"names":["React","useState","API","Container","Input","TextArea","FormBtn","Books","initialFormObjectState","title","author","synopsis","formObject","setFormObject","clearState","console","log","loadBooks","getBooks","then","catch","err","handleFormSubmit","e","preventDefault","saveBook","res","handleInputChange","event","target","name","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport API from \"../utils/API\";\r\nimport { Container } from \"../components/Grid\";\r\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\r\n\r\n\r\nfunction Books() {\r\n  // Setting our component's initial values\r\nconst initialFormObjectState = {\r\n    title: \"\",\r\n    author: \"\",\r\n    synopsis: \"\"\r\n  };\r\n// Setting up the state\r\nconst [formObject, setFormObject] = useState({...initialFormObjectState})\r\n \r\n  const clearState = () => {\r\n    console.log(formObject);\r\n    setFormObject(initialFormObjectState);\r\n        console.log(\"reset triggered\")\r\n    console.log(formObject);\r\n  };\r\n\r\n  // Loads all books and sets them to books\r\n  function loadBooks() {\r\n    API.getBooks()\r\n    //   .then(res => setBooks(res.data))\r\n      .then(clearState)\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n  // When the form is submitted, use the API.saveBook method to save the book data\r\n  // Then reload books from the database\r\n  function handleFormSubmit(e) {\r\n    e.preventDefault();\r\n    if (formObject.title && formObject.author) {\r\n      API.saveBook({\r\n        title: formObject.title,\r\n        author: formObject.author,\r\n        synopsis: formObject.synopsis\r\n      })\r\n        .then(console.log(\"book has been submitted to list\") ) \r\n        .then(res => loadBooks())\r\n        .catch(err => console.log(err));\r\n    }\r\n  };\r\n   \r\n   // Handles updating component state when the user types into the input field\r\n   function handleInputChange(event) {\r\n    const { name, value } = event.target;\r\n    setFormObject({...formObject, [name]: value})\r\n    // console.log(formObject)\r\n  };\r\n\r\n    return (\r\n    //   <Container fluid>\r\n        <row>\r\n          <col size=\"sm-6\" align='center' >\r\n            \r\n              <h2>What book title would you like to add to your list?</h2>\r\n           \r\n            <form className='card-container3' align='center'>\r\n           \r\n              <Input\r\n                onChange={handleInputChange}\r\n                name=\"title\"\r\n                placeholder=\"title (required)\"\r\n                value={formObject.title}\r\n              />\r\n              <Input\r\n                onChange={handleInputChange}\r\n                name=\"author\"\r\n                placeholder=\"author (required)\"\r\n                value={formObject.author}\r\n              />\r\n              <TextArea\r\n                // className='synopsis'\r\n                onChange={handleInputChange}\r\n                name='synopsis'\r\n                placeholder='synopsis(Optional)'\r\n                value= {formObject.synopsis}\r\n              />\r\n               <FormBtn\r\n                disabled={!(formObject.author && formObject.title)}\r\n                onClick={handleFormSubmit}> Submit Book\r\n                </FormBtn>\r\n            </form>\r\n            \r\n          </col>\r\n        </row>\r\n    //   </Container>\r\n    );\r\n  }\r\n\r\n\r\nexport default Books;\r\n"]},"metadata":{},"sourceType":"module"}